Resources:
  HelloBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: efj-site-east-1
      WebsiteConfiguration:
        IndexDocument: index.html
  HelloBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref HelloBucket
      PolicyDocument:
        Statement:
        - Sid: AllowLambda
          Effect: Allow
          Principal:
            AWS: arn:aws:iam::142362848012:role/lambda-basicauth-exec
          Action:
          - 's3:GetObject*'
          Resource:
          - 'arn:aws:s3:::efj-site-east-1/*'
        - Sid: AllowCfront
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt CFrontOAI.S3CanonicalUserId
          Action:
          - 's3:GetObject'
          Resource:
          - 'arn:aws:s3:::efj-site-east-1/*'
  CFront:
    Type: AWS::CloudFront::Distribution
    DependsOn: CFrontAuthLambdaVersion
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Enabled: True
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          TargetOriginId: S3-efj-site-east-1
          LambdaFunctionAssociations:
            - EventType: viewer-request
              IncludeBody: True
              LambdaFunctionARN: !Ref CFrontAuthLambdaVersion
        Origins:
          - DomainName: efj-site-east-1.s3.amazonaws.com
            Id: S3-efj-site-east-1
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CFrontOAI]]
  CFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'efj-site-east-1.s3.amazonaws.com'

  CFrontAuthLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: "v1"
      FunctionName: !Ref CFrontAuthLambda
  CFrontAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Handler: index.handler
      Description: Edge lambda for auth etc
      Code:
        ZipFile: |
          'use strict';
          exports.handler = (event, context, callback) => {

            // Get request and request headers
            const request = event.Records[0].cf.request;
            const headers = request.headers;

            // Configure authentication - replaced at github action time
            const authUser = "USERNAME_FROM_GITHUB_SECRET";
            const authPass = "PASSWORD_FROM_GITHUB_SECRET";

            // Construct the Basic Auth string
            const authString = 'Basic ' + new Buffer(authUser + ':' + authPass).toString('base64');
            const cookieAuth = "efjefjefjefj=" + authString;

            // Require Basic authentication - first see if there's a cookie with the right string.
            var cookieAuthed = false;
            if (headers.cookie) {
              for (let i = 0; i < headers.cookie.length; i++) {
                if (headers.cookie[i].value.indexOf(cookieAuth) >= 0) {
                  cookieAuthed = true;
                }
              }
            }

            if ((typeof headers.authorization == 'undefined' || headers.authorization[0].value != authString) && !cookieAuthed) {
              const body = 'Unauthorized';
              const response = {
                status: '401',
                statusDescription: 'Unauthorized',
                body: body,
                headers: {
                  'www-authenticate': [{key: 'WWW-Authenticate', value:'Basic'}]
                },
              };
              callback(null, response);
            }

            // Continue request processing if authentication passed
            if (!cookieAuthed) {
              const body = 'Redirect to self w/ cookie set';
              const response = {
                status: '302',
                statusDescription: 'Redirect to self to set cookie',
                body: body,
                headers: {
                  'set-cookie': [{key: 'Set-Cookie', value:cookieAuth + '; Expires=Wed, 29 Nov 2025 13:38:39 GMT;'}],
                  'location': [{key: 'Location', value: '/index.html'}],
                },
              };
              callback(null, response);
            }
    
            // Extract the URI from the request
            var olduri = request.uri;

            // Match any '/' that occurs at the end of a URI. Replace it with a default index
            var newuri = olduri.replace(/\/$/, '\/index.html');
     
            // Log the URI as received by CloudFront and the new URI to be used to fetch from origin
            console.log("Old URI: " + olduri);
            console.log("New URI: " + newuri);
    
            // Replace the received URI with the URI that includes the index page
            request.uri = newuri;
    
            // Return to CloudFront
            return callback(null, request);
          };

  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "AllowLambdaServiceToAssumeRole"
          Effect: "Allow"
          Action: 
          - "sts:AssumeRole"
          Principal:
            Service: 
            - "lambda.amazonaws.com"
            - "edgelambda.amazonaws.com"